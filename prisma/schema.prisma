datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//Roles
enum Role {
  Admin
  HR
  Manager
  Lead
  Employee
  Accounts
}

enum LeaveType {
  SICK_LEAVE
  ANNUAL_LEAVE
  CASUAL_LEAVE
  SPECIAL_LEAVE
}

enum ExpenseType {
  OPERATING_COST
  EMPLOYEE_BENEFITS
  OFFICE_RENT
  UTILITIES
  OTHER
}

enum EarningType {
  PRODUCT_SALES
  SERVICE_INCOME
  INVESTMENT
  OTHER
}

// Evaluation Status Enum
enum EvaluationStatus {
  PENDING
  SUPERVISOR_REVIEW
  HR_REVIEW
  COMPLETED
}

// Employee Model
model Employee {
  id                Int           @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String        @unique
  phoneNumber       String?
  address           String
  hireDate          DateTime
  status            String   
  department        Department    @relation(fields: [departmentId], references: [id])
  departmentId      Int
  position          Position      @relation(fields: [positionId], references: [id])
  positionId        Int
  salary            Float
  password          String
  bankAccount       String    
  performance       Performance[]
  training          Training[]
  leave             Leave[]
  wellness          Wellness[]
  benefits          Benefits[]
  payroll           Payroll[]
  selfService       EmployeeSelfService?
  onboarding        Onboarding[] 
  workforceManagement WorkforceManagement[] 
  attendance        Attendance[]  
  talentManagement  TalentManagement[] 
  successionPlan    SuccessionPlan[] 
  approved          Boolean       @default(false)
  role              Role          @default(Employee)
  totalLeave        Int          @default(3)
  // New performance evaluation relations
  receivedEvaluations     PerformanceEvaluation[]  @relation("EmployeeEvaluations")
  supervisorEvaluations   PerformanceEvaluation[]  @relation("SupervisorEvaluations")
  evaluationNotifications EvaluationNotification[]
}

// Department Model
model Department {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  employees   Employee[]
  positions   Position[]
  recruitments Recruitment[]
  hrAnalytics HRAnalytics[]
}

// Position Model
model Position {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  department    Department    @relation(fields: [departmentId], references: [id])
  departmentId  Int
  employees     Employee[]
}

// Earnings Model
model Earnings {
  id             Int           @id @default(autoincrement())
  source         EarningSource @relation(fields: [sourceId], references: [id])
  sourceId       Int
  amount         Float
  earningType    EarningType
  date           DateTime
  description    String?
}

model EarningSource {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  earnings    Earnings[]
}

// Expenses Model
model Expenses {
  id              Int             @id @default(autoincrement())
  category        ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId      Int
  amount          Float
  expenseType     ExpenseType
  date            DateTime
  description     String?
}

model ExpenseCategory {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  expenses    Expenses[]
}

// Recruitment Model
model Recruitment {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  department      Department      @relation(fields: [departmentId], references: [id])
  departmentId    Int
  jobApplications JobApplication[]
}

model JobApplication {
  id              Int           @id @default(autoincrement())
  candidateName   String
  candidateEmail  String
  resumeUrl       String
  status          String       
  recruitmentId   Int
  recruitment     Recruitment   @relation(fields: [recruitmentId], references: [id])
}

// Onboarding Model
model Onboarding {
  id              Int           @id @default(autoincrement())
  employeeId      Int
  employee        Employee      @relation(fields: [employeeId], references: [id])
  startDate       DateTime
  endDate         DateTime
  tasks           String[]         
}

// Performance Model
model Performance {
  id             Int       @id @default(autoincrement())
  employeeId     Int
  employee       Employee  @relation(fields: [employeeId], references: [id])
  evaluationDate DateTime
  score          Int
  feedback       String
}

// Benefits Model
model Benefits {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  benefitType String   
  status      String    
  startDate   DateTime
  endDate     DateTime?
}

// Workforce Management Model
model WorkforceManagement {
  id             Int       @id @default(autoincrement())
  employeeId     Int
  employee       Employee  @relation(fields: [employeeId], references: [id])
  shiftStart     DateTime
  shiftEnd       DateTime
  status         String    
}

// Time and Attendance Model
model Attendance {
  id            Int       @id @default(autoincrement())
  employeeId    Int
  employee      Employee  @relation(fields: [employeeId], references: [id])
  checkInTime   DateTime
  checkOutTime  DateTime
  status        String   
}

// Absence and Leave Management Model
model Leave {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  leaveType   LeaveType    
  startDate   DateTime
  endDate     DateTime
  firstName   String
  lastName    String
  status      String     
  specialLeaveReason  String? 
}

// Learning and Development Model
model Training {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  courseName  String
  provider    String   
  startDate   DateTime
  endDate     DateTime
  status      String    
}

// Talent Management Model
model TalentManagement {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  skillSet    String
  careerGoals String
}

// Succession Planning Model
model SuccessionPlan {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  planDetails String
  status      String   
}

// HR Analytics Model
model HRAnalytics {
  id               Int        @id @default(autoincrement())
  departmentId     Int
  department       Department @relation(fields: [departmentId], references: [id])
  totalEmployees   Int
  attritionRate    Float
  satisfactionScore Float
}

// Payroll Model
model Payroll {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  salary      Float
  bonuses     Float
  deductions  Float
  netSalary   Float
  payDate     DateTime
  status      String    
}

// Wellness Model
model Wellness {
  id              Int       @id @default(autoincrement())
  employeeId      Int
  employee        Employee  @relation(fields: [employeeId], references: [id])
  wellnessProgram String
  status          String   
}

// Employee Self-Service Model
model EmployeeSelfService {
  id          Int       @id @default(autoincrement())
  employeeId  Int       @unique
  employee    Employee  @relation(fields: [employeeId], references: [id])
  dashboard   String   
}

// New Performance Evaluation Models
model KPITemplate {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true)
  isAutomatic Boolean   @default(false)
  startDate   DateTime
  endDate     DateTime
  kpiCriteria KPICriteria[]
  evaluations PerformanceEvaluation[]
}

model KPICriteria {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  weightage     Float
  template      KPITemplate @relation(fields: [templateId], references: [id])
  templateId    Int
  evaluations   KPIEvaluation[]
}

model PerformanceEvaluation {
  id                Int       @id @default(autoincrement())
  employee          Employee  @relation("EmployeeEvaluations", fields: [employeeId], references: [id])
  employeeId        Int
  supervisor        Employee  @relation("SupervisorEvaluations", fields: [supervisorId], references: [id])
  supervisorId      Int
  template          KPITemplate @relation(fields: [templateId], references: [id])
  templateId        Int
  status            EvaluationStatus @default(PENDING)
  hrComments        String?
  supervisorComments String?
  finalScore        Float?
  startDate         DateTime
  endDate           DateTime
  kpiEvaluations    KPIEvaluation[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model KPIEvaluation {
  id                Int       @id @default(autoincrement())
  criteria          KPICriteria @relation(fields: [criteriaId], references: [id])
  criteriaId        Int
  evaluation        PerformanceEvaluation @relation(fields: [evaluationId], references: [id])
  evaluationId      Int
  supervisorRating  Float?
  hrRating          Float?
  comments          String?
}

model EvaluationNotification {
  id              Int       @id @default(autoincrement())
  employee        Employee  @relation(fields: [employeeId], references: [id])
  employeeId      Int
  message         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
}